version: 2.1

orbs:
  slack: circleci/slack@4.10.1
            
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-goodboy
            aws cloudformation delete-stack --stack-name udapeople-backend-goodboy
            aws s3 rm "s3://udapeople-frontend-goodboy" --recursive
            aws s3 rm "s3://udapeople-goodboy" --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Noir3xAHGQCwSYcM3NPLNi/migration_goodboy)
            echo $SUCCESS
            if(( $SUCCESS == 1 )); 
            then
              cd backend
              # npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     channel: '#circleci'
      #     template: basic_success_1
      #     event: always
  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - slack/notify:
      #     template: basic_success_1
      #     event: always
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
              cd frontend
              npm install
              npm run test        
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
              cd backend
              npm install
              npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan
          command: |
              cd frontend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Run backend scan
          command: |
              cd backend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force
              # npm audit --audit-level=critical
      # - slack/notify:
      #     channel: '#circleci'
      #     event: fail
      #     template: basic_fail_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name "udapeople-backend-goodboy" \
              --parameter-overrides ID="goodboy"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name "udapeople-frontend-goodboy" \
              --parameter-overrides ID="goodboy"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-goodboy" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            # cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 
  configure-infrastructure:
    docker:
      - image: python:3.10.7-alpine3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["55:6a:b8:f3:52:3a:4f:9b:04:e1:a7:d1:04:9a:bf:88"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --upgrade ansible openssh curl tar gzip py3-pip
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment    
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvbd
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/Noir3xAHGQCwSYcM3NPLNi/migration_goodboy -d '1'
              curl --insecure https://kvdb.io/Noir3xAHGQCwSYcM3NPLNi/migration_goodboy
            fi
      - destroy-environment
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            npm install tar 
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-goodboy" \
              --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"goodboy".tar.gz dist
            aws s3 cp dist s3://udapeople-frontend-goodboy --recursive
      - destroy-environment  
  deploy-backend:
    docker:
      - image: python:3.10.7-alpine3.15
    steps:
      - checkout 
      - add_ssh_keys: 
          fingerprints: ["55:6a:b8:f3:52:3a:4f:9b:04:e1:a7:d1:04:9a:bf:88"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm curl rsync tar openssh gzip
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            ls
            cd ..
            ls
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ls
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
      - destroy-environment 
  smoke-test:
    docker:
      - image: python:3.10.7-alpine3.15
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl tar openssh
            pip install awscli 
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-goodboy" \
              --output text
            )
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030" 
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-frontend-goodboy.s3-website-us-east-1.amazonaws.com/#/employees"            
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: update cloudfront
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="goodboy" \
                    --tags project=udapeople
      - revert-migrations
      - destroy-environment
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "goodboy"
            # Fetch the stack names
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"
            # Remove old stacks and files
            echo OldWorkflowID: "${OldWorkflowID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name front-prod-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name back-prod-${OldWorkflowID}
            fi
      - destroy-environment
      - revert-migrations
workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]